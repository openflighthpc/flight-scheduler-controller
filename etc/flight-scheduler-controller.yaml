#==============================================================================
# Copyright (C) 2020-present Alces Flight Ltd.
#
# This file is part of FlightSchedulerController.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# FlightSchedulerController is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with FlightSchedulerController. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on FlightSchedulerController, please visit:
# https://github.com/openflighthpc/flight-scheduler-controller
#==============================================================================

# Auth type.  The authentication type to use.
# Valid values are 'basic', 'munge'.
# Can be set from the environment variable FLIGHT_SCHEDULER_AUTH_TYPE which
# takes precedence over this setting.
# Default: munge
# auth_type: "munge"

# Bind address.  The address for the controller daemon to bind to.
# Can be set from the environment variable FLIGHT_SCHEDULER_BIND_ADDRESS which
# takes precedence over this setting.
# Default: http://127.0.0.1:918
# bind_address: ""

# The name of the cluster.
# Can be set from the environment variable FLIGHT_SCHEDULER_CLUSTER_NAME which
# takes precedence over this setting.
# Default: the empty string.
# cluster_name: ""

# The prefix used for environment variables set in a job's context.
# Environment variable FLIGHT_SCHEDULER_ENV_VAR_PREFIX takes precedence over this setting.
# Default: the empty string.
# env_var_prefix: ""

# Log level.
# Environment variable FLIGHT_SCHEDULER_LOG_LEVEL takes precedence over this
# setting.
# Default: info
# log_level: info

# Polling Timeout.
# The timeout for long polling requests made to see if a job or job step is
# running.
# Default: 30 seconds
# polling_timeout: 30

# Spool directory.
# Environment variable FLIGHT_SCHEDULER_SPOOL_DIR takes precedence over this
# setting.
# Default: The relative directory ./var/spool.  Relative to the root of the
# flight scheduler installation.
# spool_dir: './var/spool'

# How frequently, in seconds, to run the periodic processor.  The periodic
# processor includes cleaning out the job registry.
# Default: 60 seconds
# timer_interval: 60

# Time, in seconds, for the periodic processor.
# Default: 30 seconds
# timer_timeout: 30

# Scheduler algorithm.  The algorithm to use for allocating nodes to jobs, aka, scheduling.
# Valid values are 'fifo', 'backfilling'.
# Environment variable FLIGHT_SCHEDULER_SCHEDULER_ALGORITHM takes precedence
# over this setting.
# Default: backfilling
# scheduler_algorithm: backfilling

# Maximum number of jobs to consider when running the scheduling loop.
# Default: 50
# scheduler_max_jobs_considered: 50

# The working directory that partition scripts are ran in. The event scripts should be
# located in this directory
# Environment variable FLIGHT_SCHEDULER_LIBEXEC_DIR
# Default: './libexec'
# libexec_dir: libexec

# Partition status update period
# Default: 3600
# status_update_period: 3600

# The minimum and maximum debouncing periods in seconds
# Min Default: 30 seconds
# Max Default: 600 seconds
# min_debouncing: 30
# max_debouncing: 600

# Generic sleep period
# The generic sleep period used throughout the application in seconds.
# Default: 1 second
# generic_short_sleep:

# Partitions.
partitions:
  - name: all
    default: true
    max_time_limit: 10
    default_time_limit: 1
    event_scripts:
      excess: slack.sh
      insufficient: slack.sh
      status: slack.sh
    node_matchers:
      name:
        regex: ".*"

  - name: compute
    max_time_limit: 10
    default_time_limit: 1
    node_matchers:
      cpus:
        gte: 2
      gpus:
        lte: 1

  - name: gpus
    max_time_limit: 10
    default_time_limit: 1
    node_matchers:
      gpus:
        gte: 2

# PARTITION SYNTAX
# The following is the partition definition syntax. The fields marked with
# <TYPE> are required, where [TYPE] are optional. Arrays and objects are
# denoted using standard YAML syntax.
#
# NOTE: [OBJECT] denotes that the entire sub-object is optional. It may
# still have required keys if it has been defined.
#
# - name:    <STRING>       - The name of the partition, must be unique
#   default: [BOOLEAN]      - Flags the default partition,
#                             must be true for exactly one partition
#   nodes: [ARRAY]          - A list of statically define nodes
#     - <STRING>            - The name of the node
#     ...
#   max_time_limit: [TIME]  - The maximum a job can run on the partition,
#                             uses time notation
#   default_time_limit: [TIME]  - The default time a job can run on the
#                                 partition, uses time notation
#   node_matchers: [OBJECT] - The dynamic nodes specification
#     name: [OBJECT]        - Matches based on the node name
#       regex: [STRING]     - Pattern matches based on ruby regex notation.
#                             This match will implicitly wild card the begining
#                             and end. To preform an exact match, it must be
#                             prefixed with '\A' and suffixed with '\Z'.
#                             NOTE: The leading and trailing slashes '/' must
#                                   be omitted due to YAML constraints.
#                             SEE: https://ruby-doc.org/core-2.7.0/Regexp.html
#     cpus:   [OBJECT]      - Matches based on the number of cpus
#       lt:   [INTEGER]     - Must be less than the given number
#       lte:  [INTEGER]     - Must be less than or equal to the given number
#       gt:   [INTEGER]     - Must be greater than the given number
#       gte:  [INTEGER]     - Must be greater than or equal to the given number
#     gpus:   [OBJECT]      - Matches based on the number of cpus
#       ...                 - Same as cpus section
#     memory: [OBJECT]      - Matches based on the available memory
#                             NOTE: This matcher works in Bytes
#       ...                 - Same as cpus section
#   types: [OBJECT]         - Define the partitions node types
#                             NOTE: The daemons are responsible the for
#                                   reporting the node type and are not limited
#                                   to the types expressed here
#     <name>: <KEY>         - The name of the type
#                             NOTE: The names share a global namespace. Nodes
#                                   may belong to multiple partitions but will
#                                   still only have a single type.
#       minimum: [INTEGER]  - The recommended minimum number of nodes
#       maximum: [INTEGER]  - The recommended maximum number of nodes
#   event_scripts: [OBJECT] - Specify scripts to be ran in response to triggers
#                             The scripts must be executable from the libexec
#                             directory.
#     status: <EXECUTABLE>  - Ran periodically to report the partition status
#     excess: <EXECUTABLE>        - Ran when there are unused idle nodes
#     insufficient: <EXECUTABLE>  - Ran when there are jobs blocked on resources
#
# TIME SYNTAX
# By default all times are expressed in minutes (both as strings and integers).
# However the following formats are also supported:
# * MM
# * MM:SS
# * HH:MM:SS
# * DD-HH
# * DD-HH:MM
# * DD-HH:MM:SS
